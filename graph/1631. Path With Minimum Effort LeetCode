import java.util.*;

class Solution {
    class Pair {
        int x;
        int y;
        int effort;

        Pair(int x, int y, int effort) {
            this.x = x;
            this.y = y;
            this.effort = effort;
        }
    }

    public int minimumEffortPath(int[][] heights) {
        int rows = heights.length;
        int cols = heights[0].length;
        int[][] efforts = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(efforts[i], Integer.MAX_VALUE);
        }
        efforts[0][0] = 0;

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.effort - b.effort);
        pq.add(new Pair(0, 0, 0));

        int[] dx = { -1, 1, 0, 0 };
        int[] dy = { 0, 0, -1, 1 };

        while (!pq.isEmpty()) {
            Pair p = pq.remove();
            int x = p.x;
            int y = p.y;
            int currentEffort = p.effort;

            if (x == rows - 1 && y == cols - 1) {
                return currentEffort;
            }

            for (int i = 0; i < 4; i++) {
                int newX = x + dx[i];
                int newY = y + dy[i];
                if (newX >= 0 && newY >= 0 && newX < rows && newY < cols) {
                    int newEffort = Math.max(currentEffort, Math.abs(heights[newX][newY] - heights[x][y]));
                    if (newEffort < efforts[newX][newY]) {
                        efforts[newX][newY] = newEffort;
                        pq.add(new Pair(newX, newY, newEffort));
                    }
                }
            }
        }

        return efforts[rows - 1][cols - 1];
    }
}
