import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

class Solution {
    class Pair {
        int x;
        int y;
        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public int shortestPathBinaryMatrix(int[][] grid) {
        if (grid[0][0] == 1 || grid[grid.length - 1][grid[0].length - 1] == 1) return -1;
        
        int[][] distance = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            Arrays.fill(distance[i], (int) 1e9);
        }
        
        distance[0][0] = 1;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(0, 0));
        
        int[] dx = {-1, -1, -1, 0, 1, 1, 1, 0};
        int[] dy = {-1, 0, 1, 1, 1, 0, -1, -1};
        
        while (!q.isEmpty()) {
            Pair p = q.remove();
            int x = p.x;
            int y = p.y;
            
            for (int i = 0; i < 8; i++) {
                int X = x + dx[i];
                int Y = y + dy[i];
                
                if (X >= 0 && Y >= 0 && X < grid.length && Y < grid[0].length && grid[X][Y] != 1 && distance[X][Y] > distance[x][y] + 1) {
                    distance[X][Y] = distance[x][y] + 1;
                    q.offer(new Pair(X, Y));
                }
            }
        }
        
        int result = distance[grid.length - 1][grid[0].length - 1];
        return result == (int) 1e9 ? -1 : result;
    }
}
