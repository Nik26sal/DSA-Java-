class Solution {
    class Pair {
        int node;
        int time;
        Pair(int node, int time) {
            this.node = node;
            this.time = time;
        }
    }

    class Tuple {
        int node;
        int time;
        Tuple(int node, int time) {
            this.node = node;
            this.time = time;
        }
    }

    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < times.length; i++) {
            graph.get(times[i][0]).add(new Pair(times[i][1], times[i][2]));
        }

        int[] distance = new int[n + 1];
        Arrays.fill(distance, (int) 1e9);
        distance[k] = 0;

        PriorityQueue<Tuple> pq = new PriorityQueue<>((a, b) -> a.time - b.time);
        pq.add(new Tuple(k, 0));

        while (!pq.isEmpty()) {
            Tuple t = pq.remove();
            int node = t.node;
            int time = t.time;

            for (Pair p : graph.get(node)) {
                int desti = p.node;
                int newTime = time + p.time;
                if (distance[desti] > newTime) {
                    distance[desti] = newTime;
                    pq.add(new Tuple(desti, newTime));
                }
            }
        }

        int maxTime = 0;
        for (int i = 1; i <= n; i++) {
            if (distance[i] == (int) 1e9) return -1;
            maxTime = Math.max(maxTime, distance[i]);
        }

        return maxTime;
    }
}
