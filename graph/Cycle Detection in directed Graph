--> DFS
    class Solution {
    private boolean DFS(boolean visited[],boolean inPath[],ArrayList<ArrayList<Integer>> adj,int src){
        visited[src] = true;
        inPath[src] = true;
        ArrayList<Integer> nbrs = adj.get(src);
        for(int nbr:nbrs){
            if(!visited[nbr]){
                if((DFS(visited,inPath,adj,nbr))){
                    return true;
                }
            }
            else{
                if(inPath[nbr])return true;
            }
        }
        inPath[src] = false;
        return false;
    }
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visited [] = new boolean[V];
        boolean inPath [] = new boolean[V];
        for(int i = 0;i<V;i++){
            if(!visited[i]){
          if(DFS(visited,inPath,adj,i)){
              return true;
          }
            }
        }
        return false;
    }
}
-->BFS
     BFS way of it is not possible because the bactracking of inpath array is not possible.
