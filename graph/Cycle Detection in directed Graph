--> DFS
    class Solution {
    private boolean DFS(boolean visited[],boolean inPath[],ArrayList<ArrayList<Integer>> adj,int src){
        visited[src] = true;
        inPath[src] = true;
        ArrayList<Integer> nbrs = adj.get(src);
        for(int nbr:nbrs){
            if(!visited[nbr]){
                if((DFS(visited,inPath,adj,nbr))){
                    return true;
                }
            }
            else{
                if(inPath[nbr])return true;
            }
        }
        inPath[src] = false;
        return false;
    }
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visited [] = new boolean[V];
        boolean inPath [] = new boolean[V];
        for(int i = 0;i<V;i++){
            if(!visited[i]){
          if(DFS(visited,inPath,adj,i)){
              return true;
          }
            }
        }
        return false;
    }
}
-->BFS
     
class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
         int[] inDegree = new int[V];
        
        // Step 1: Calculate in-degrees
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                inDegree[neighbor]++;
            }
        }

        // Step 2: Initialize the queue with vertices of zero in-degree
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                queue.offer(i);
            }
        }

        // Step 3: Perform topological sorting
        int count = 0;
        while (!queue.isEmpty()) {
            int current = queue.poll();
            count++;
            for (int neighbor : adj.get(current)) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    queue.offer(neighbor);
                }
            }
        }

        // Step 4: Check if topological sorting includes all vertices
        return count != V;
    }
}
