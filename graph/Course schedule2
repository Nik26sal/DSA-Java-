class Solution {
    public int[] findOrder(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < edges.length; i++) {
            graph.get(edges[i][1]).add(edges[i][0]);
        }

        int[] inDegree = new int[V];
        for (int i = 0; i < V; i++) {
            for (int nbr : graph.get(i)) {
                inDegree[nbr]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        
        int index = 0;
        int topo[] = new int[V];
        while (!q.isEmpty()) {
            int a = q.poll();
            topo[index++] = a;
            for (int i : graph.get(a)) {
                inDegree[i]--;
                if (inDegree[i] == 0) {
                    q.offer(i);
                }
            }
        }

        if (index != V) {
            return new int[0];
        }

        return topo;
    }
}
