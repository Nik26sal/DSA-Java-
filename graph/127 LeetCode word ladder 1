--Brute Force solution -->

import java.util.*;

class Solution {
    class Pair {
        String s;
        int level;
        Pair(String s, int level) {
            this.s = s;
            this.level = level;
        }
    }

    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q = new LinkedList<>();
        Set<String> wordSet = new HashSet<>(wordList);
        if (!wordSet.contains(endWord)) return 0; 
        q.offer(new Pair(beginWord, 1));
        
        String str = "abcdefghijklmnopqrstuvwxyz";
        
        while (!q.isEmpty()) {
            Pair p = q.remove();
            String s = p.s;
            int level = p.level;
            
            if (s.equals(endWord)) {
                return level;
            }
            
            for (int i = 0; i < s.length(); i++) {
                for (int j = 0; j < 26; j++) {
                    String dupli = s.substring(0, i) + str.charAt(j) + s.substring(i + 1);
                    if (wordSet.contains(dupli)) {
                        q.add(new Pair(dupli, level + 1));
                        wordSet.remove(dupli);
                    }
                }
            }
        }
        return 0;
    }
}

--> optimal solution----->

