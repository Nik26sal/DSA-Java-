class Solution {
    class Pair {
        int x;
        int y;

        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public void solve(char[][] board) {

        boolean visited[][] = new boolean[board.length][board[0].length];
        Queue<Pair> q = new LinkedList<>();
        char[][] ans = new char[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            Arrays.fill(ans[i], 'X');
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'O') {
                    if (i == 0 || j == 0 || i == board.length - 1 || j == board[0].length - 1) {
                        q.offer(new Pair(i, j));
                        ans[i][j] = 'O';
                        visited[i][j] = true;
                    }
                }

            }
        }
        int dx[] = { -1, 1, 0, 0 };
        int dy[] = { 0, 0, -1, 1 };
        while (!q.isEmpty()) {
            Pair p = q.remove();
            int x = p.x;
            int y = p.y;

            for (int i = 0; i < 4; i++) {
                int X = x + dx[i];
                int Y = y + dy[i];

                if (X >= 0 && Y >= 0 && X < board.length && Y < board[0].length && !visited[X][Y] && board[X][Y] == 'O') {
                    q.offer(new Pair(X, Y));
                    ans[X][Y] = 'O';
                    visited[X][Y] = true;
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = ans[i][j];
            }
        }
    }
}
