class Solution {
    class Pair{
        int x;
        int cnt;
        int y;
        Pair(int x,int y,int cnt ){
            this.x =x;
            this.y =y;
            this.cnt =cnt;
        }
    }
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
      Queue<Pair> q = new LinkedList<>();
      int count =0;
      for(int i=0;i<n;i++){
        for(int j =0;j<m;j++){
            if(grid[i][j] == 2){
                q.offer(new Pair(i,j,0));
            }
        }
      }
      int dx[] = {-1,1,0,0};
      int dy[] = {0,0,-1,1};
      while(!q.isEmpty()){
        Pair p = q.remove();
        int x = p.x;
        int y = p.y;
        int cnt = p.cnt;
        count = cnt;
        for(int i =0;i<4;i++){
            int X = x+dx[i];
            int Y = y+dy[i];
            if(X>=0 && Y>=0 && X<grid.length &&Y<grid[0].length && grid[X][Y] == 1 ){
                grid[X][Y] = 2;
                q.add(new Pair(X,Y,cnt+1));
            }
        }
      }
      for(int i =0;i<n;i++){
        for(int j =0;j<m;j++){
if(grid[i][j] == 1)return -1;
        }
      }
      return count;
    }
}
