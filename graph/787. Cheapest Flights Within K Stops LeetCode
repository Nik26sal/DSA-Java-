
class Solution {
   class Pair{
    int node;
    int cost;
    public Pair(int node,int cost){
        this.node = node;
        this.cost = cost;
    }
}
class Tuple {
    int stop, node, cost; 
    Tuple(int stop, int node, int cost) {
        this.stop = stop; 
        this.node = node;
        this.cost = cost; 
    }
}

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>(); 
        for(int i = 0;i<n;i++) {
            adj.add(new ArrayList<>()); 
        }
        int m = flights.length; 
        for(int i = 0;i<m;i++) {
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2])); 
        }
        
        Queue<Tuple> q = new LinkedList<>(); 
        
        q.add(new Tuple(0, src, 0));
        int[] dist = new int[n]; 
        for(int i = 0;i<n;i++) {
            dist[i] = (int)(1e9); 
        }
        dist[src] = 0; 
        while(!q.isEmpty()) {
            Tuple it = q.remove(); 
            int stops = it.stop; 
            int node = it.node; 
            int cost = it.cost; 
            if(stops > K) continue; 
            for(Pair iter: adj.get(node)) {
                int adjNode = iter.node; 
                int edW = iter.cost; 
                
                if (cost + edW < dist[adjNode] && stops <= K) {
                    dist[adjNode] = cost + edW; 
                    q.add(new Tuple(stops + 1, adjNode, cost + edW)); 
                }
            }
        }
        if(dist[dst] == (int)(1e9)) return -1; 
        return dist[dst]; 
    }
}
