--BruteForce solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int height(TreeNode root){
        if(root == null)return 0;
        int lh = height(root.left);
        int rh = height(root.right);
        return 1+Math.max(lh,rh);
    }
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null){
            return 0;
        }
        int lsd = diameterOfBinaryTree(root.left);
        int rsd = diameterOfBinaryTree(root.right);
        int lh = height(root.left);
        int rh = height(root.right);
        int sd = lh+rh;
        return Math.max(sd,Math.max(lsd,rsd));
    }
}

--Optimize Solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int Diameter(TreeNode root,int[] max){
        if(root == null)return 0;
        int lh = Diameter(root.left,max);
        int rh = Diameter(root.right,max);
        max[0] = Math.max(max[0],lh+rh);
        return 1+Math.max(lh,rh);
    }
    public int diameterOfBinaryTree(TreeNode root) {
        int max[] = new int[1];
        Diameter(root,max);
        return max[0];
    }
}
